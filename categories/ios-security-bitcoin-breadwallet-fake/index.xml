<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>gsora&#39;s place</title>
    <link>http://blog.gsora.xyz/categories/ios-security-bitcoin-breadwallet-fake/index.xml</link>
    <description>Recent content on gsora&#39;s place</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="http://blog.gsora.xyz/categories/ios-security-bitcoin-breadwallet-fake/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Dissecting a fake breadwallet iOS app</title>
      <link>http://blog.gsora.xyz/Dissecting-a-fake-breadwallet-iOS-app/</link>
      <pubDate>Thu, 11 Aug 2016 00:00:00 +0000</pubDate>
      
      <guid>http://blog.gsora.xyz/Dissecting-a-fake-breadwallet-iOS-app/</guid>
      <description>&lt;pre&gt;&lt;code&gt;Disclaimer: I do not work for breadwallet, anything you&#39;ll read in this article is not endorsed by them; I am fairly new to mobile app security too, so expect errors.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;Bitcoin is a nice way of thinking about money: you&amp;rsquo;re your bank, anyone knows anything about your assets and vice versa, it&amp;rsquo;s decentralized.&lt;/p&gt;

&lt;p&gt;But since you&amp;rsquo;re the only one responsible for your money, a single error can - and &lt;em&gt;will&lt;/em&gt; - lead to bad consequences.&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;Today I&amp;rsquo;ll talk about this last part because since the beginning of August 2016, someone is trying to scam iOS Bitcoin holders - often newcomers - faking one of the most used wallet on this platform, &lt;strong&gt;breadwallet&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;iOS is a fairly secure platform, but this fake entity found a method to circumvent the AppStore app review process, uploading many fraudolent version of breadwallet.&lt;/p&gt;

&lt;p&gt;These fake versions tend to have the same behaviour: they&amp;rsquo;re almost identical to official apps in both look and functionality, but they steal coins instead.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://blog.gsora.xyz/assets/images/breadywallet-apps.png&#34;&gt;&lt;img src=&#34;http://blog.gsora.xyz/assets/images/breadywallet-apps.png&#34; style=&#34;margin: 0 auto; display: block; width:50%&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;ios-application-reverse-engineering-101&#34;&gt;iOS application reverse engineering 101&lt;/h2&gt;

&lt;p&gt;Reversing a binary built for iOS isn&amp;rsquo;t a straightforward process, because Apple encrypts every binary they push on the AppStore.&lt;/p&gt;

&lt;p&gt;To be able to reverse anything, the first thing to do is proceed to jailbreak a physical iOS device - in this case I used an iPhone 6s.&lt;/p&gt;

&lt;p&gt;This way it&amp;rsquo;s far more easier to decrypt a packaged AppStore binary, and it&amp;rsquo;s possible to take a look to what the application does on the device itself: since I&amp;rsquo;m looking for anomalies, better look everywhere.&lt;/p&gt;

&lt;p&gt;A quick search on the AppStore for &amp;ldquo;breadwallet&amp;rdquo; gave me this interesting clone called &amp;ldquo;breadywallet&amp;rdquo; (notice the extra &amp;lsquo;y&amp;rsquo;), that appears as &amp;ldquo;Hangman&amp;rdquo; on the SpringBoard.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://blog.gsora.xyz/assets/images/breadywallet-appstore.png&#34;&gt;&lt;img src=&#34;http://blog.gsora.xyz/assets/images/breadywallet-appstore.png&#34; style=&#34;margin: 0 auto; display: block; width:50%&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Of course, I already downloaded (and used with much success) the official application on my device.&lt;/p&gt;

&lt;p&gt;To decrypt an AppStore binary I used the excellent &lt;a href=&#34;https://github.com/KJCracks/Clutch&#34;&gt;Clutch&lt;/a&gt;, as suggested by the &lt;a href=&#34;http://iphonedevwiki.net/index.php/Reverse_Engineering_Tools#Clutch&#34;&gt;iPhoneDevWiki&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;AppStore binaries are placed in &lt;code&gt;/var/containers/Bundle/Application&lt;/code&gt;, but the folders containing actual binaries are renamed after an UUID - a quick bash oneliner can help us find the wallets:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;iDjentleman:~ root# find /private/var/containers/Bundle/Application -maxdepth 2 -type d -name &amp;quot;*wallet.app&amp;quot; -exec echo {} \;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Running this command will reveal something interesting:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/private/var/containers/Bundle/Application/4F76E2BF-3A60-4349-B8CA-52B808108981/breadwallet.app

/private/var/containers/Bundle/Application/BB79C9DE-BBA9-4B39-B959-E085EEC67682/breadwallet.app
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;How can we distinguish between the fake app and the official one?&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:2&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:2&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;Every iOS application embeds a metadata file - &lt;code&gt;iTunesMetadata.plist&lt;/code&gt;; using &lt;code&gt;plutil&lt;/code&gt; we can check for the software Bundle ID (which should be unique for every application on the AppStore):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# cd /private/var/containers/Bundle/Application/4F76E2BF-3A60-4349-B8CA-52B808108981/
# plutil iTunesMetadata.plist | grep softwareVersionBundleId
    softwareVersionBundleId = breadywallet;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Oh! Looks like we found the impostor!&lt;/p&gt;

&lt;p&gt;After installing Clutch on the device, decrypting the binary is a matter of seconds:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;iDjentleman:~ root# ./clutch  -b breadywallet
ASLR slide: 0x1000b8000
Dumping &amp;lt;breadwallet&amp;gt; (arm64)
Patched cryptid (64bit segment)
Writing new checksum
Finished dumping breadywallet to /var/tmp/clutch/4B395DF4-9644-4A5D-8F03-4F2494FF6FB2
Finished dumping breadywallet in 0.9 seconds
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Clutch only managed to decrypt the arm64 build because my iPhone is on iOS 9.3.2 and this major release introduced Bitcode.&lt;/p&gt;

&lt;p&gt;Bitcode permits building IPAs specifically tailored for each iOS device Apple currently supports, including in the binary only the correct architecture for each of them - since I&amp;rsquo;m on an arm64 device, the only segment Clutch found was the 64-bit one.&lt;/p&gt;

&lt;p&gt;I decrypted the real breadwallet too, for the sake of comparison.&lt;/p&gt;

&lt;p&gt;All these operations have been executed via SSH directly on the device, now we can take the reverse engineering process on a PC.&lt;/p&gt;

&lt;h2 id=&#34;a-rough-idea&#34;&gt;A rough idea&lt;/h2&gt;

&lt;p&gt;My first thought was:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;this rogue app steals Bitcoin but at the same time it&#39;s a totally legit wallet too, so it&#39;s working using the breadwallet&#39;s methods and functions to send coins to a wallet controlled by the offender.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;this means the faker could have &amp;ldquo;engraved&amp;rdquo; this address in the binary.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;strings&lt;/code&gt; to the rescue!&lt;/p&gt;

&lt;p&gt;A Bitcoin wallet address is simple&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:3&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:3&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;its length goes from a minimum of 25 characters, to a max of 35&lt;/li&gt;
&lt;li&gt;it starts with a &amp;ldquo;1&amp;rdquo; or a &amp;ldquo;3&amp;rdquo;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Again, bash will help us achieve what we need:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#!/bin/bash
for line in $(cat $1); do 
	if [[ ${#line} -ge 26 &amp;amp;&amp;amp; ${#line} -le 35 ]]; then
		if [[ $line == 1* || $line == 3*  ]]; then
			echo $line
		fi
	fi
done
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Running this script against the strings we took earlier, somethings pops out:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;12HzbRzNumLxnRxNY72eosNBC98bWHwE85
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A Bitcoin address!&lt;/p&gt;

&lt;h2 id=&#34;sneaky-beaky-like&#34;&gt;Sneaky-beaky like&lt;/h2&gt;

&lt;p&gt;There&amp;rsquo;s a major difference between the legit binary and the fake one: a method.&lt;/p&gt;

&lt;p&gt;All the interesting action happends inside the &lt;code&gt;BRSendViewController&lt;/code&gt; class.&lt;/p&gt;

&lt;p&gt;Inside the fake breadwallet there&amp;rsquo;s a method called &lt;code&gt;makeTest&lt;/code&gt;, which have an almost identical flow compared to the legit &lt;code&gt;payToClipboard&lt;/code&gt;; this last method basically send a fixed amount of coins to the address the OS clipboard contains.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;makeTest&lt;/code&gt; does something similar: it creates a payment request for the fraud address instead of the one contained into &lt;code&gt;payToClipboard&lt;/code&gt;, then displays a fake error message:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Wallet decryption error, check phone for unwanted programs&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;tricking the user into thinking his/her phone has been hacked.&lt;/p&gt;

&lt;p&gt;When the payment view will be presented, &lt;code&gt;makeTest&lt;/code&gt; will be called.&lt;/p&gt;

&lt;h2 id=&#34;conclusions&#34;&gt;Conclusions&lt;/h2&gt;

&lt;p&gt;Using a common blockchain explorer we can clearly see that this address was not used until the 1st of August 2016; during the period between its first transaction and the 13 of August, this address accumulated &lt;em&gt;~47BTC&lt;/em&gt;, and withdrawn everything to multiple addresses the 12 of August.&lt;/p&gt;

&lt;p&gt;At the current exchange value, 47BTC can be converted to about &lt;em&gt;27k$&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;breadwallet is &lt;a href=&#34;https://github.com/voisine/breadwallet/&#34;&gt;open source&lt;/a&gt;, this means the faker blindly cloned the repository and didn&amp;rsquo;t even bothered changing the UI at all, but just the bundle ID and the SpringBoard app name.&lt;/p&gt;

&lt;p&gt;This means Apple doesn&amp;rsquo;t put a lot of efforts into the app review process, just a single letter changed in the name and boom, goes directly on the AppStore!&lt;/p&gt;

&lt;p&gt;The review process for this kind of app (and all the Finance ones, too), needs to be completely renewed, putting more effort into finding dupes and fakes.&lt;/p&gt;

&lt;p&gt;Yesterday (12 August), Apple removed the application from their stores worldwide, but I think a new fake will come up soon.&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;Mt.Gox anyone?
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:2&#34;&gt;More chaos for the end-user is advisable in this situation, I guess.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:2&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:3&#34;&gt;&lt;a href=&#34;https://en.bitcoin.it/wiki/Address&#34;&gt;ref&lt;/a&gt;; the method I describe here doesn&amp;rsquo;t 100% validate an address
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:3&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</description>
    </item>
    
  </channel>
</rss>